@page "/moviles/chofer-form/{*extraParams}"
@* @page "/moviles/chofer-form/{id:int?}" *@

@using NeoRemiseria.Components
@using Models
@using Services

@inject NavigationManager Navigation
@inject ITable<Persona> PersonaService
@inject ITable<Movil> MovilService
@inject ITable<Chofer> ChoferService
@inject IJSRuntime JS

@rendermode InteractiveServer

@* <h3 class="text-center">@(Id.HasValue ? "Modificar" : "Registrar") Chofer</h3> *@
<div class="modal fade" id="formChofer" data-bs-backdrop="static" tabindex="-1">
    <div class="modal-dialog modal-dialog-centered modal-dialog-scrollable">
        <div class="modal-content">
            <div class="modal-header">
                <h3 class="modal-title">@(Id.HasValue && Id.Value != 0 ? "Modificar" : "Registrar") Chofer</h3>
                <button type="button" class="btn btn-close btn-outline-danger" data-bs-dismiss="modal" @onclick="Cancel"></button>
            </div>
            <div class="modal-body">
                <EditForm Model="chofer" OnValidSubmit="Enviar" class="container mx-auto">
                    <DataAnnotationsValidator />
                    <ValidationSummary />

                    <div class="form-group input-group mb-3">
                        <label for="movil" class="input-group-text">Movil</label>
                        <InputSelect id="movil" class="form-select form-control" disabled @bind-Value="chofer.NumeroMovil" required>
                            <option value="0">Seleccione un movil de la lista</option>
                            @foreach(var movil in moviles){
                                <option value=@movil.Id>
                                    @($"{movil.Id} - Patente: {movil.Patente}")
                                </option>
                            }
                        </InputSelect>
                        <ValidationMessage For="@(() => chofer.NumeroMovil)" />
                    </div>

                    <div class="form-group input-group mb-3">
                        <label for="persona" class="input-group-text">DNI</label>
                        <InputSelect id="persona" class="form-select form-control" @bind-Value="chofer.IdPersona" required>
                            <option value="0">Seleccione una persona de la lista</option>
                                @foreach(var persona in personas.OrderBy(p => p.Apellido).ThenBy(p => p.Nombre)){
                                    <option value=@persona.Id>
                                        @($"{persona.Dni} - {persona.Apellido}, {persona.Nombre}")
                                    </option>
                                }
                        </InputSelect>
                        <ValidationMessage For="@(() => chofer.IdPersona)" />
                    </div>

                    <div class="row">
                        <div class="form-group mb-3 col-sm-6">
                            <label for="desde">Desde</label>
                            <InputDate id="desde" class="form-control" @bind-Value="chofer.FechaDesde" required style="width: 10rem;"></InputDate>
                            <ValidationMessage For="@(() => chofer.FechaDesde)" />
                        </div>

                        @if(Id.HasValue && Id.Value > 0){
                            <div class="form-group mb-3 col-sm-6">
                                <label for="hasta">Hasta</label>
                                <InputDate id="hasta" class="form-control" @bind-Value="chofer.FechaHasta" style="width: 10rem;"></InputDate>
                            </div>
                        }

                        <div class="form-group mb-3">
                            <label for="observacion">Observaciones</label>
                            <textarea name="observacion" id="observacion" class="form-control" RowCount="5" @bind="chofer.Observacion"></textarea>
                        </div>
                    </div>

                    <!-- botones -->
                    <button type="submit" class="btn btn-success">Guardar</button>
                    <button type="button" class="btn btn-secondary" @onclick="Cancel">Cancelar</button>
                </EditForm>
            </div>
        </div>
    </div>
</div>

@code{
    [Parameter] public string? extraParams {get; set;}
    // private Dictionary<string, object> parameters = new Dictionary<string, object>();
    private int? Id {get;set;}
    private int? IdMovil {get; set;}
    private List<Movil> moviles = new List<Movil>();
    private List<Persona> personas = new List<Persona>();
    private Chofer? chofer {get; set;} = new Chofer();

    public override async Task SetParametersAsync(ParameterView parameters){
        // Inicializar valores
        Id = 0;
        IdMovil = 0;

        // Procesar los parametros pasados por la URL
        if (parameters.TryGetValue<string>(nameof(extraParams), out var value)){
            var keyValue = value.Split('=');
            if (keyValue.Length == 2){
                if(keyValue[0] == "id" && int.TryParse(keyValue[1], out int idValue)){
                    Id = idValue;
                }
                else if(keyValue[0] == "idMovil" && int.TryParse(keyValue[1], out int idMovilValue)){
                    IdMovil = idMovilValue;
                }
            }
        }

        // LLamar al último a la implementación base para establecer los parámetros
        await base.SetParametersAsync(parameters);
    }
    
    protected override async Task OnInitializedAsync(){

        moviles = await MovilService.GetAll();
        personas = await PersonaService.GetAll();

        // Comprobar si se pasó un Id
        if (Id.HasValue && Id.Value > 0){
            chofer = await ChoferService.GetById((uint)Id.Value) ?? null;
        }
        else{
            chofer = new Chofer {
                FechaDesde = new DateOnly(DateTime.Now.Year, DateTime.Now.Month, DateTime.Now.Day),
                NumeroMovil = IdMovil.HasValue ? (uint)IdMovil.Value : 0
            };
        }
    }

    protected override async Task OnAfterRenderAsync (bool firstRender){
        if (firstRender){
            // Abrir el modal
            await JS.InvokeVoidAsync("showBSModal","formChofer");
        }
    }

    @* protected override void OnParametersSet(){
        Console.WriteLine("Metodo: OnParametersSet");
        Orden += 1;
        Console.WriteLine($"Orden de ejecución: {Orden}.");
        Console.WriteLine();
        // Inicializar Id e IdMovil
        // Id = 0;
        // IdMovil = 0;
        
        // Procesar los parametros pasados por la URL
        if (!string.IsNullOrEmpty(extraParams)){
            var paramArray = extraParams.Split(new[] {'/'}, StringSplitOptions.RemoveEmptyEntries);
            foreach(var param in paramArray){
                var keyValue = param.Split('=');
                if(keyValue.Length == 2){
                    // parameters[keyValue[0]] = int.TryParse(keyValue[1], out int value) ? value : (object)null;
                    if(keyValue[0] == "id" && int.TryParse(keyValue[1], out int idValue)){
                        Id = idValue;
                    }
                    else if(keyValue[0] == "idMovil" && int.TryParse(keyValue[1], out int idMovilValue)){
                        IdMovil = idMovilValue;
                    }
                }
            }
        }

        // Guardar en el objeto chofer
        // chofer.NumeroMovil = (uint)IdMovil;
        // Comprobar si se pasó un Id
        if (Id.HasValue && Id.Value > 0){
            chofer = await ChoferService.GetById((uint)Id.Value) ?? null;
            var choferGet = BuscarChofer((uint)Id);
            chofer.Id = choferGet.Result.Id;
        }
        else{
            //chofer = new Chofer {
                chofer.FechaDesde = new DateOnly(DateTime.Now.Year, DateTime.Now.Month, DateTime.Now.Day);
                chofer.NumeroMovil = (uint)IdMovil;
            //};
        }
    }     *@

    private async Task Enviar(){
        // TODO:
        // Realizar las validaciones
        
        if (chofer != null){
            // Comprobar los rangos de fechas
            DateOnly fechaActual = new DateOnly(DateTime.Now.Year, DateTime.Now.Month, DateTime.Now.Day);
            if (chofer.FechaDesde > fechaActual || chofer.FechaHasta > fechaActual || chofer.FechaDesde > chofer.FechaHasta){
                await Swal.FireAsync("Información", "Fechas ingresadas no válida", SweetAlertIcon.Info);
                return;
            }

            if(!Id.HasValue || Id.Value == 0){
                // Comprobar que no se cargue dos veces un chofer en un movil
                List<Chofer> choferes = await ChoferService.GetAll();
                if (choferes != null && choferes.Any(ch =>ch.NumeroMovil == chofer.NumeroMovil && ch.IdPersona == chofer.IdPersona && ch.FechaHasta == chofer.FechaHasta)){
                    await Swal.FireAsync("Información","El chofer que intenta ingresar ya está registrado en el móvil",SweetAlertIcon.Info);
                    return;
                }

                // Insertar datos del chofer
                await ChoferService.AddItem(chofer);
            }
            else{
                // Actualizar en Chofer
                await ChoferService.UpdateItem(chofer);
            }
        }
        else{
            await Swal.FireAsync("Error","Ocurrió un error al enviar los datos.", SweetAlertIcon.Error);
        }

        // Redirigir al listado de choferes por movil
        Navigation.NavigateTo("/moviles/chofer-por-movil", true);
    }

    private void Cancel(){
        Navigation.NavigateTo("/moviles/chofer-por-movil", true);
    }
}