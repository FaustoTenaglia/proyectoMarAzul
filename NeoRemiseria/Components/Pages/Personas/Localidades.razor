@page "/localidades"

@using NeoRemiseria
@using Models
@using Services

@inject IJSRuntime JSRuntime
@inject ITable<Localidad> LocalidadService
@inject ITable<Provincia> ProvinciaService
@inject NavigationManager Navigation

@rendermode InteractiveServer

<div class="input-group mb-3">
    <h3 class="mx-2">Localidades</h3>
    <button type="button" class="btn btn-outline-success" @onclick="() => Handle(localidadSeleccionada)">
        <i class="bi bi-plus-lg"></i>
    </button>
</div>

<ModalDialog 
    Mensaje=@($"¿Desea eliminar la localidad {@localidadSeleccionada.Nombre}?") 
    Id="modalEliminar" 
    Titulo = "Confirmación"
    OnResult=" async Task (int res) => {if(res == 1){await LocalidadService.DeleteItem(localidadSeleccionada.Id); await CargarDatos();}}" />

@if(localidades != null){
    <table class="table table-hover">
        <thead>
            <tr class="table-dark">
                @* <th>#</th> *@
                <th>Nombre</th>
                <th colspan="2">Provincia</th>
            </tr>
        </thead>
        <tbody>
            @foreach(var localidad in localidades.OrderBy(l => l.Nombre)){
                <tr>
                    @* <td>@localidad.Id</td> *@
                    <td>@localidad.Nombre</td>
                    <td>@localidad.IdProvinciaNavigation?.Nombre</td>
                    <td class="btn-group-sm">
                        <button type="button" class="btn btn-outline-primary" @onclick="() => Handle(localidad)">
                            <i class="bi bi-pen-fill"></i>
                        </button>
                        <button type="button" class="btn btn-outline-danger" @onclick="() => ConfirmarEliminacion(localidad.Id)">
                            <i class="bi bi-trash"></i>
                        </button>
                    </td>
                </tr>
            }
        </tbody>
    </table>
}
else{
    <p>Cargando datos...</p>
}

@code{
    private List<Localidad> localidades = new List<Localidad>();
    private List<Provincia> provincias = new List<Provincia>();
    private Localidad localidadSeleccionada = new Localidad();

    protected override async Task OnInitializedAsync(){
        localidades = await LocalidadService.GetAll();
        provincias = await ProvinciaService.GetAll();
    }

    private async Task CargarDatos(){
        localidades = await LocalidadService.GetAll();
        localidadSeleccionada = new Localidad();
    }

    private async Task ConfirmarEliminacion(uint id){
        localidadSeleccionada = await LocalidadService.GetById(id);
        JSRuntime.InvokeVoidAsync("showBSModal","modalEliminar");
    }

    private async Task Handle(Localidad localidad){
        if(localidad.Id > 0){
            Navigation.NavigateTo($"/localidad-form/{localidad.Id}");
        }
        else{
            Navigation.NavigateTo($"/localidad-form");
        }
    }
}