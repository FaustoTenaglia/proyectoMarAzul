@page "/personas/dueños"

@rendermode InteractiveServer

@using NeoRemiseria
@using Models
@using Services

@inject IJSRuntime JSRuntime
@inject ITable<Modelo> ModeloService
@inject ITable<Movil> MovilService
@inject ITable<Persona> PersonaService


@if(personas != null){
    <h3>Listado de Dueños de los móviles</h3>

    @foreach(var persona in personas.OrderBy(p => p.Apellido).ThenBy(p => p.Nombre)){
        <div class="row row-cols-lg-2">
            <div class="col-md-6 mb-3 mb-sm-0">
                <div class="card border-primary">
                    <div class="card-header text-primary">
                     @* <a href="/persona-form/@persona.Id">@($"DNI: {persona.Dni}")</a>   *@
                     <a href="/persona-edit/@persona.Id">@($"DNI: {persona.Dni}")</a>  
                    </div>
                    <div class="card-body">
                        <h5 class="card-title"> @($"Titular: {persona.Apellido} {persona.Nombre}")</h5>
                        <p class="card-text mb-1">@($"Domicilio: {persona.Calle} N°{persona.Numero}")</p>
                        <p class="card-text">@($"Localidad: {persona.IdLocalidadNavigation?.Nombre}")</p>
                    </div>
                    <div class="card-footer border-primary">
                        <p class="text-start-sm text-wrap">Teléfonos:
                            @foreach(var telefono in persona.Telefonos.Where(t => t.Estado == 'A')){
                                <span class="form-text mx-1">@telefono.Numero</span>
                            }
                        </p> 
                    </div>
                </div>
            </div>
            <div class="col-mb-6 mb-3 mb-sm-0">
                <ol class="list-group list-group-numbered">
                @foreach(var movil in moviles.Where(m => m.IdTitular == persona.Id)){
                        <li class="list-group-item d-flex justify-content-between align-items-start">
                            <div class="ms-2 me-auto">
                                <div class="fw-bold">@($"Movil N°{movil.Id} patente: {movil.Patente}")</div>
                                @($"{MarcaModelo(movil.IdModelo ?? 0)} - Año {movil.Año}")
                            </div>
                            <span class="badge text-bg-primary rounded-pill">@movil.Id</span>
                        </li>
                }
                </ol>
            </div>
        </div>
    }
}

@code{
    private string dni = "";
    private List<Persona> personas = new List<Persona>();
    private List<Movil> moviles = new List<Movil>();
    private List<Modelo> modelos = new List<Modelo>();
    private Persona persona = new Persona();

    protected override async Task OnInitializedAsync(){
        // Cargar los moviles que tienen registrado su titular y están activos
        moviles = await MovilService.GetAll(m => m.IdTitular != null && m.Estado == 'A');
        
        // Cargar informacion sobre los modelos de moviles
        modelos = await ModeloService.GetAll();

        // Cargar solo los datos de las personas que estan registradas como dueño de moviles
        var personasId = moviles.Select(m => m.IdTitular)
                            .Distinct()
                            .ToList();
        personas = await PersonaService.GetAll(p => personasId.Contains(p.Id));
    }

    private string MarcaModelo (uint IdModelo){
        // Buscar el modelo de acuerdo al id pasado por parámetro
        var modelo = modelos.FirstOrDefault(mo => mo.Id == IdModelo);

        // Devolver en una cadena de texto la marca y el nombre del modelo
        // desconocido si no se encontro el modelo
        return modelo != null ? $"{modelo.IdMarcaNavigation?.Nombre} {modelo.Nombre}" : "sin especificar";
    }

    public async Task BuscarPersona(){
        if(!string.IsNullOrWhiteSpace(dni)){
            personas = await PersonaService.GetAll(p => p.Dni.Contains(dni));
            if(personas != null){
                persona = personas[0];
            }
            else{
                await Swal.FireAsync($"No existe el dni {dni} ingresado");
            }
        }
    }
}