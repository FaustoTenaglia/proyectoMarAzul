@page "/moviles"

@using NeoRemiseria.Models
@using NeoRemiseria.Services

@inject NavigationManager NavigationManager
@inject ITable<Movil> MovilService

<h3 class="mb-3 text-center text-primary">Lista de Móviles</h3>

<div class="text-end mb-3">
    <button class="btn btn-success" @onclick="CreateNewMovil">Agregar Nuevo Móvil</button>
</div>

@if (moviles == null)
{
    <div class="text-center">Cargando móviles...</div>
}
else if (!moviles.Any())
{
    <div class="alert alert-warning text-center">No hay móviles disponibles.</div>
}
else
{
    <div class="table-responsive">
        <table class="table table-bordered table-hover shadow-lg rounded" style="border-radius: 15px; overflow: hidden;">
            <thead style="background: linear-gradient(90deg, #007bff, #00aaff);" class="text-white">
                <tr>
                    <th>Patente</th>
                    <th>Año</th>
                    <th>Modelo</th>
                    <th>Titular</th>
                    <th>Acciones</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var movil in moviles)
                {
                    <tr>
                        <td>@movil.Patente</td>
                        <td>@movil.Año</td>
                        <td>@movil.IdModeloNavigation?.Nombre</td>
                        <td>@movil.IdTitularNavigation?.NombreCompleto</td>
                        <td class="btn-group-sm">
                            <button class="btn btn-warning" @onclick="() => EditMovil(movil.Id)">
                                Editar
                            </button>
                            <button class="btn btn-danger" @onclick="() => ConfirmDeleteMovil(movil.Id)">
                                Eliminar
                            </button>
                        </td>
                    </tr>
                }
            </tbody>

            @* Mensaje si no hay resultados *@
            @if (!moviles.Any())
            {
                <tr>
                    <td colspan="5" class="text-center">No se encontraron resultados.</td>
                </tr>
            }
        </table>
    </div>
}

@code {
    private List<Movil> moviles;

    protected override async Task OnInitializedAsync()
    {
        await LoadMoviles();
    }

    private async Task LoadMoviles()
    {
        moviles = await MovilService.GetAll();
    }

    private void CreateNewMovil()
    {
        NavigationManager.NavigateTo("movil-form");
    }

    private void EditMovil(uint id)
    {
        NavigationManager.NavigateTo($"editar-movil/{id}");
    }

    private async Task ConfirmDeleteMovil(uint id)
    {
        var confirmed = await ShowConfirmationDialog("¿Está seguro que desea eliminar este móvil?");
        if (confirmed)
        {
            await DeleteMovil(id);
        }
    }

    private async Task DeleteMovil(uint id)
    {
        if (await MovilService.DeleteItem(id))
        {
            await LoadMoviles(); // Refresca la lista después de eliminar
        }
        else
        {
            // Manejar error de eliminación
            await ShowErrorMessage("Error al eliminar el móvil.");
        }
    }

    private async Task<bool> ShowConfirmationDialog(string message)
    {
        // Implementa aquí la lógica para mostrar un diálogo de confirmación y retornar true/false.
        return true; // Cambiar esto según la implementación real.
    }

    private async Task ShowErrorMessage(string message)
    {
        // Implementa aquí la lógica para mostrar un mensaje de error al usuario.
    }
}
