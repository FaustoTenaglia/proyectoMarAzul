@page "/cobranzas/consultar-deuda"

@using System.Linq.Expressions
@using Microsoft.EntityFrameworkCore
@using MySql.Data.MySqlClient

@using Models
@using Services

@inject IJSRuntime JSRuntime
@inject NavigationManager Navigation
@inject ITable<Movil> MovilService
@inject ITable<Marca> MarcaService
@inject ITable<Persona> PersonaService
@inject ITable<Deuda> DeudaService
@inject MovimientoService MovimientoService
@inject PagoService PagoService

@rendermode InteractiveServer

<!-- Modales para búsqueda y selección -->
@if (moviles != null && moviles.Any()){
    <ModalSearch Items="@moviles.Select(m => new {Id = m.Id, Patente = m.Patente, Modelo = m.IdModeloNavigation?.Nombre, Marca = m.IdModeloNavigation?.IdMarcaNavigation?.Nombre, Dni = m.IdTitularNavigation?.Dni, Titular = $"{m.IdTitularNavigation?.Apellido} {m.IdTitularNavigation?.Nombre}"}).ToList()"
                 OnSelected="(uint id) => {IdSeleccionado = (int)id; query = id.ToString();}"
                 Id="modalBuscarMovil" />
}
@if (titulares != null && titulares.Any()){
    <ModalSearch Items="@titulares.Select(m => new {Id = m.Id, Dni = m.Dni, Apellido = m.Apellido, Nombre = m.Nombre}).OrderBy(m => m.Apellido).ThenBy(m => m.Nombre).ToList()"
                 OnSelected="(uint id) => {queryCargarDni(id);}"
                 Id="modalBuscarTitular" />
}

<!-- Modal para mostrar el detalle de los pagos -->
<section class="modal fade" id="periodoDetalle" tabindex="-1" role="dialog" data-bs-backdrop="static" aria-hidden="true">
    <div class="modal-dialog modal-dialog-centered" role="document">
        <div class="modal-content">
            <div class="modal-header alert-primary">
                <h5 class="modal-title">Periodo @deudaActual.Periodo.ToString("MMMM-yyyy")</h5>
                <button type="button" class="btn btn-close btn-outline-danger" data-bs-dismiss="modal"></button>
            </div>
            <div class="modal-body">
                <div class="card">
                    <div class="card-header">
                        <p class="card-title card-text">Movil N°@deudaActual.IdMovil</p>
                    </div>
                    <div class="card-body">
                        <h5 class="card-title fw-bold">TOTAL: @deudaActual.Importe.ToString("C")</h5>
                        <h6 class=@(@deudaActual.Saldo > 0 ? "card-subtitle mb-2 text-danger" : "card-subtitle mb-2 text-success")> Saldo: @deudaActual.Saldo?.ToString("C")</h6>
                        <p class="card-text">Detalle</p>
                        <ul class="list-group list-group-flush">
                            @foreach(var pago in pagosDetalle){
                                @* <li class="list-group-item">@pago.Fecha @pago.Importe.ToString("C")</li> *@
                                <li class="list-group-item">@pago.Tiempo.ToString("dd/MM/yyyy") @pago.Importe?.ToString("C")</li>
                            }
                        </ul>
                    </div>
                </div>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-primary" data-bs-dismiss="modal">
                    Aceptar
                </button>
            </div>
        </div>
    </div>
</section>

<h3>Estado de Cuenta</h3>
<div class="input-group mb-3">
    <span class="input-group-text">@((Seleccion == "1") ? "Móvil " : "DNI ")N°</span>
    <input type="text"class="form-control" @bind="@query" @bind:after="Buscar" />
    <button type="button" class="btn btn-outline-primary" @onclick="Buscar">
        @* @if (IdSeleccionado > 0){ *@
        @if (!string.IsNullOrEmpty(query) && !string.IsNullOrWhiteSpace(query)){
            <i class="bi bi-chevron-double-right"></i>
        }
        else {
            <i class="bi bi-search"></i>
        }
    </button>

    <div class="btn-group-sm form-check form-check-inline" role="group">
        <input type="radio" value="1" name="seleccion" id="radioMovil" class="btn-check" autocomplete="off" @onchange="@CambiaSeleccion" checked />
        <label for="radioMovil" class="btn btn-outline-primary">Movil</label>

        <input type="radio" value="2" name="seleccion" id="radioTitular" class="btn-check" autocomplete="off" @onchange="CambiaSeleccion" />
        <label for="radioTitular" class="btn btn-outline-primary">Dueño</label>
    </div>
</div>
@if(Seleccion == "2"){
    var titular = titulares?.FirstOrDefault(t => t.Id == (uint)IdSeleccionado);
    if (titular != null){
        <div class="row mb-3">
            <div class="col-md-6 mb-2 hstack gap-2">
                <span class="input-group-text">Apellido</span>
                <span>@titular.Apellido</span>
            </div>
            <div class="col-md-6 hstack gap-2">
                <span class="input-group-text">Nombre</span>
                <span>@titular.Nombre</span>
            </div>
        </div>
    }
    else{
        <div class="text-secondary">Sin información</div>
    }
}
<div class="row">
    <div class="input-group mb-3 col-md-6" style="width: 16rem;">
        <span class="input-group-text">Desde</span>
        <input type="date" class="form-control" @bind="fechaDesde" />
    </div>
    <div class="input-group mb-3 col-md-6" style="width: 16rem;">
        <span class="input-group-text">Hasta</span>
        <input type="date" class="form-control" @bind="fechaHasta" />
    </div>
</div>

<!-- Mostrar los moviles si se está buscando por dueño -->
@if (IdSeleccionado > 0 && Seleccion != "1" && movilesSeleccionados != null){
<section class="container">
    <h5><b>Moviles</b></h5>
        <table class="table table-sm table-hover">
            <thead>
                <tr>
                    <td>N°</td>
                    <td>Patente</td>
                </tr>
            </thead>
            <tbody>
                @foreach(var movil in movilesSeleccionados){
                    <tr @ondblclick="() => SeleccionarFila(movil)" class="@GetRowClass(movil)">
                        <td>@movil.Id</td>
                        <td>@movil.Patente</td>
                    </tr>
                }
            </tbody>
        </table>
</section>
}

@if (Seleccion != "1" && MovilSeleccionado != null){
    <div class="mb-3">
            <button type="button" class="btn btn-outline-success" @onclick="async Task() => {await Consultar(MovilSeleccionado.Id);}">
                Consultar
                <i class="bi bi-chevron-double-right"></i>
            </button>
    </div>
}

@if (deudas != null && MovilSeleccionado != null){
    // Calculo de los totales
    var totalMovilSeleccionado = deudas.Where(d => d.IdMovil == @MovilSeleccionado.Id).Sum(d => d.Importe);
    var saldoMovilSeleccionado = deudas.Where(d => d.IdMovil == @MovilSeleccionado.Id).Sum(d => d.Saldo);
    var cobradoMovilSeleccionado = totalMovilSeleccionado - saldoMovilSeleccionado;

    <!-- Detalle del movil seleccionado -->
    <section class="container mb-3">
            @* <h6 class="my-3">Detalle para el móvil N°@MovilSeleccionado.Id</h6> *@
            <div class="hstack gap-2 mb-3">
                <span class="input-group-text">Patente</span>
                <span class="text-normal">@MovilSeleccionado.Patente</span>
                <span class="input-group-text ms-5">Marca y Modelo</span>
                <span class="text-normal">@MovilSeleccionado.IdModeloNavigation?.IdMarcaNavigation?.Nombre @MovilSeleccionado.IdModeloNavigation?.Nombre</span>
            </div>
            <div class="hstack gap-2 mb-3">
                <span class="input-group-text bg-secondary text-white">TOTAL:</span>
                <span class="fw-bold">@totalMovilSeleccionado.ToString("C")</span>
            </div>
            @if (cobradoMovilSeleccionado != 0m){
                <div class="hstack gap-2 mb-3">
                    <span class="input-group-text text-white bg-success">COBRADO:</span>
                    <span class="fw-bold text-success">@cobradoMovilSeleccionado?.ToString("C")</span>
                </div>
            }
            <div class="hstack gap-2 mb-3">
                <span class="input-group-text text-white bg-danger">SALDO:</span>
                <span class="fw-bold text-danger">@saldoMovilSeleccionado?.ToString("C")</span>
            </div>
            <div class="list-group list-group-flush">
                <h6 class="mb-3">Períodos</h6>
                @foreach(var deuda in deudas.OrderByDescending(d => d.Periodo)){
                    var cantidadPagos = (pagos != null && pagos.Any()) ? pagos.Where(p => p.IdDeuda == deuda.Id).ToList().Count() : 0;
                    <button type="button" class="list-group-item list-group-item-action btn position-relative" @onclick="async Task() => {await MostrarModalDetalle(deuda);}">
                        @deuda.Periodo.ToString("MMMM-yyyy")
                        @if (cantidadPagos > 0){
                            <span class="badge text-white bg-success position-absolute top-0 translate-middle rounded-pill">
                                @cantidadPagos
                            </span>
                        } 
                        <span class="mx-2">
                            @if (deuda.Saldo > 0){
                                <span class="text-danger">Saldo: @deuda.Saldo?.ToString("C")
                                    <i class="bi bi-arrow-right"></i>
                                </span>
                            }
                            else{
                                <span class="text-success">
                                    <i class="bi bi-check-lg"></i>
                                </span>
                            }
                        </span>
                    </button>
                }
            </div>
    </section>
}
else{
    <p class="text-center">Sin datos</p>
}

@code{
    private string Seleccion {get;set;} = "1"; // Para indicar 1: movil, 2: dueños
    private List<Marca>? marcas; // Para el id
    private int IdSeleccionado {get; set;} 
    private string? query {get;set;} = "";
    private Movil? MovilSeleccionado; // Movil para el que se va a consultar
    private List<Movil>? moviles, movilesSeleccionados; // Los moviles de la remiseria y los moviles por dueño
    private List<Persona>? titulares; // Los dueños de los moviles
    private List<Deuda>? deudas; 
    private List<Movimiento>? pagos;
    private List<Movimiento> pagosDetalle = new List<Movimiento>();
    private Deuda deudaActual = new Deuda();
    private DateOnly fechaDesde = new DateOnly(DateTime.Now.Year,1,1),
                     fechaHasta = new DateOnly(DateTime.Now.Year, DateTime.Now.Month, 1);

    protected override async Task OnInitializedAsync(){
        // Cargar datos desde la base de datos
        marcas = await MarcaService.GetAll();
        moviles = await MovilService.GetAll(m => m.IdTitular != null && m.Estado == 'A');
        titulares = await PersonaService.GetAll(p => p.Estado == 'A' &&
                            moviles.Select(m => m.IdTitular)
                                   .Distinct()
                                   .Contains(p.Id));   
    }

    private void Limpiar(){
        IdSeleccionado = 0;
        query = "";

        MovilSeleccionado = null;
        movilesSeleccionados = null;

        deudas = null;
        pagos = null;
    }

    private void CambiaSeleccion(ChangeEventArgs e){
        Seleccion = e.Value?.ToString() ?? "1";

        Limpiar();
        StateHasChanged();
    }
    
    private async Task Buscar(){
        if (!string.IsNullOrEmpty(query) && !string.IsNullOrWhiteSpace(query)){
            try{
                Expression<Func<Movil, bool>> condicion; // Para ingresar la condicion al WHERE al traer los móviles
                
                // Preguntar si se busca por número de móvil o número de DNI del titular
                if (Seleccion == "1"){// Por número de móvil
                    // Convertir lo ingresado en el input text en un entero
                    IdSeleccionado = Convert.ToInt32(query);

                    // Buscar el móvil que coincida con lo ingresado y que esté activo
                    condicion = movil => movil.Id == IdSeleccionado && movil.Estado == 'A';
                }
                else{// Por número de titular
                    // Bucar al titular cuyo DNI coincida con lo ingresado
                    var titular = titulares?.FirstOrDefault(t => t.Dni == query);
                    
                    // No se encontró el titular, lanzar la excepción
                    if (titular == null) throw new KeyNotFoundException("No se encuentra el número de DNI ingresado.");
                    
                    // Trabajar con el ID del titular, no con su DNI
                    IdSeleccionado = (int)titular.Id;

                    // Móviles cuyo titular tenga el Id seleccionado
                    condicion = m => m.IdTitularNavigation != null && m.IdTitularNavigation.Id == (uint)IdSeleccionado;
                }

                // Traer los moviles que cumplan la condición
                movilesSeleccionados = await MovilService.GetAll(condicion);

                // Separar el movil que se eligió
                MovilSeleccionado = movilesSeleccionados != null && movilesSeleccionados.Count == 1 ? movilesSeleccionados[0] : null;
                if (MovilSeleccionado != null){
                    // SE encuentra el móvil, consultar la deuda
                    await Consultar(MovilSeleccionado.Id);
                }else{
                    // NO se encuentra el movil, lanzar excepción
                    if (Seleccion == "1")throw new KeyNotFoundException("No se encuentra el número de móvil ingresado");
                }
            }
            catch (KeyNotFoundException e){
                await Swal.FireAsync(new SweetAlertOptions {
                    TitleText = "Información",
                    Text = e.Message, // valor ingresado no existe
                    Icon = SweetAlertIcon.Info,
                    AllowOutsideClick = false
                });
            }
            catch (Exception e){
                await Swal.FireAsync(new SweetAlertOptions {
                    TitleText = "Error",
                    Text = e.Message, //"Valor ingresado no es válido",
                    Icon = SweetAlertIcon.Error,
                    AllowOutsideClick = false
                });
            }
        }
        else{
            await MostrarModalBusqueda();
        }
    }

    private async Task MostrarModalBusqueda(){
        // Mostrar el modal de acuerdo a si se busca por movil o por dueño del movil
        var modal = Seleccion == "1" ? "modalBuscarMovil" : "modalBuscarTitular";
        await JSRuntime.InvokeVoidAsync("showBSModal", modal);
    }

    private void SeleccionarFila (Movil m){
        if (MovilSeleccionado != m){
            MovilSeleccionado = m;
            deudas = null;
            pagos = null;
        }
        else{
            MovilSeleccionado = null;
        }
    }

    private string GetRowClass(Movil m){
        return MovilSeleccionado == m ? "table-active table-primary" : "";
    }

    private async Task Consultar (uint idMovil){
        if (idMovil > 0 && fechaDesde <= fechaHasta){
            deudas = await DeudaService.GetAll(d => d.IdMovil == idMovil && d.Periodo >= fechaDesde && d.Periodo <= fechaHasta);
            if (deudas != null){
                //pagos = await PagoService.ObtenerPagos(p => deudas.Select(d => d.Id).Contains(p.IdDeuda));
                pagos = await MovimientoService.Obtener(p => p.IdDeuda != null); // && deudas.Select(d => d.Id).Contains(p.IdDeuda));
            }else{
                await Swal.FireAsync("Información","No se registran deudas.",SweetAlertIcon.Info);
            }
        }
        else if(fechaHasta < fechaDesde){
            // Mostrar cartel de rangos de fecha no son válidos
            await Swal.FireAsync("Información", "Los rangos ingresados no son válidos", SweetAlertIcon.Info);
        }
    }

    private async Task MostrarModalDetalle (Deuda deuda){
        // Guardar en una variabla para poder acceder desde el modal a los datos
        deudaActual = deuda;

        // Proceder sólo si existe la deuda y hay registrados pagos
        if (deudaActual != null && pagos != null){
            // Obtener el detalle de los pagos para la deuda seleccionada
            pagosDetalle = pagos.Where(p => p.IdDeuda == deudaActual.Id).ToList();
            // Mostrar el modal sólo si se registran pagos para la deuda seleccionada
            if (pagosDetalle != null && pagosDetalle.Any()){
                await JSRuntime.InvokeVoidAsync("showBSModal","periodoDetalle");
            }else{
                await Swal.FireAsync("Información", "No se registran pagos para éste período.", SweetAlertIcon.Info);
            }
        }
    }

    private void queryCargarDni(uint id){
        IdSeleccionado = (int)id;
        if (Seleccion == "2"){
            var titular = titulares?.FirstOrDefault(t => t.Id == id);
            query = (titular != null) ? titular.Dni : "";
        }
    }
}