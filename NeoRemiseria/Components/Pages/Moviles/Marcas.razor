@page "/marcas"

@using Microsoft.EntityFrameworkCore

@using Models
@using Services

@inject DbremiseriaContext DBRemiseria
@inject IJSRuntime JSRuntime
@inject ITable<Marca> MarcaService

@rendermode InteractiveServer

<div class="container-sm m-auto" style="max-width: 420px;">
    <h3>Marcas</h3>
    
    <div class="container-fluid mx-auto my-3">
        <div class="input-group">
            <span class="input-group-text">Nombre</span>
            <input type="text" id="inputNombre" class="form-control" placeholder="Ingrese una marca" @bind="marcaNueva.Nombre" @bind:after="ValidarNombre">
            <button class="btn btn-outline-success" @onclick="AgregarMarca">
                <i class="bi bi-plus-lg"></i>
            </button>
        </div>
        @if(msjError != null){
            <div class="my-2">
                <p style="color: red; font-size: 0.75em;">
                    <i class="bi bi-exclamation-circle-fill" style="margin-right: 0.3em;"/>@msjError
                </p>
            </div>
        }    
    </div>

    @if(marcas != null){
        <ul class="list-unstyled list-group">
            @foreach(var marca in marcas){
                <li class="list-group-item d-flex justify-content-between">
                    <div class="input-group">
                        <span class="input-group-text">@marca.Id</span>
                        <input type="text" class="form-control" @bind=@marca.Nombre disabled="@(!marca.EditMode)">
                    </div>
                    <div class="btn-group btn-group-sm" role="group">
                        @if(!marca.EditMode){
                            <button type="button" class="btn btn-outline-primary" @onclick="() => {marca.cambiarEditMode();}">
                                <i class="bi bi-pen-fill"></i>
                            </button>
                            <button class="btn btn-outline-danger" @onclick="() => ShowModalEliminar(marca)">
                                <i class="bi bi-trash"></i>
                            </button>
                            }
                        else{
                            <button type="button" class="btn btn-outline-success" @onclick="() => ShowModalConfirmar(marca)">
                                <i class="bi bi-check"></i>
                            </button>
                            <button class="btn btn-outline-danger" @onclick="() => {marca.cambiarEditMode();}">
                                <i class="bi bi-x"></i>
                            </button>
                            }
                    </div>
                </li>
            }
        </ul>
    }
</div>

@* Modals *@
<div class="modal fade" id="ConfirmDelForm" data-bs-backdrop="static">
    <div class="modal-dialog modal-centered">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Confirmacion</h5>
                <button class="btn-close" type="button" data-bs-dismiss="modal"></button>
            </div>
            <div class="modal-body">
                <p class="text-center">¿Desea eliminar la marca <strong>@marcaActual.Nombre</strong>?</p>
            </div>
            <div class="modal-footer">
                <button class="btn btn-success" type="button" data-bs-dismiss="modal" @onclick="() => EliminarMarca(marcaActual.Id)">Si</button>
                <button class="btn btn-secondary" type="button" data-bs-dismiss="modal">No</button>
            </div>
        </div>
    </div>
</div>

<div class="modal fade" id="ConfirmForm" data-bs-backdrop="static">
    <div class="modal-dialog modal-centered">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Información</h5>
                <button class="btn-close" type="button" data-bs-dismiss="modal" @onclick="() => marcaActual.cambiarEditMode()"></button>
            </div>
            <div class="modal-body">
                <p class="text-center">¿Desea guardar los cambios?</p>
            </div>
            <div class="modal-footer">
                <button class="btn btn-success" type="button" data-bs-dismiss="modal" @onclick="() => ActualizarMarca(marcaActual)">Si</button>
                <button class="btn btn-secondary" type="button" data-bs-dismiss="modal" @onclick="() => marcaActual.cambiarEditMode()">No</button>
            </div>
        </div>
    </div>
</div>

@code {
    // Definir clase para poder trabajar individualmente con cada objeto de la lista
    public class ItemMarca{
        public uint Id {get; set;}
        public string Nombre {get; set;} = null!;
        public bool EditMode {get; set;} = false;
        public void cambiarEditMode(){
            EditMode = !EditMode;
        }
        public Marca ToMarca(){
            return new Marca{
                Id = this.Id, 
                Nombre = this.Nombre};
        }
    }

    private List<Marca> recordMarcas = new List<Marca>();
    private ItemMarca marcaActual = new ItemMarca();
    public Marca marcaNueva = new Marca ();
    public List<ItemMarca> marcas = new List<ItemMarca>();
    private string? msjError {get; set;}
    
    protected override async Task OnInitializedAsync(){
        // Cargar los datos desde la tabla de la base de datos
        // Generalmente se hace antes que se cargue el componente, por eso se encuentra en éste método
        await CargarMarcas();
    }

    private async Task CargarMarcas(){
        recordMarcas =  await MarcaService.GetAll();

        // Ya se trajo los registros de la tabla, pasarlo a otra lista, para agregar un atributo
        // que refleja si se puede editar o no 
        if(recordMarcas != null){
            marcas = recordMarcas.Select(m => new ItemMarca {
                Id = m.Id,
                Nombre = m.Nombre,
                EditMode = false //El atributo en cuestión
            }).ToList();
        }

        marcaNueva.Id = 0;
        marcaNueva.Nombre = "";
    }

    public async Task<uint> ObtenerId(){
        var idMax = await DBRemiseria.Marcas.MaxAsync(m => (uint?) m.Id);
        return (idMax+1) ?? 0;
    }

    public async Task AgregarMarca(){
        if (!string.IsNullOrWhiteSpace(marcaNueva.Nombre)){
            await MarcaService.AddItem(marcaNueva);

            // Volver a cargar la lista de marcas
            await CargarMarcas();

            // Opcional: Forzar la actualizacion del estado del componente
            StateHasChanged();
        }
    }

    public async void ActualizarMarca(ItemMarca marca){
        Marca? _marca;

        if (marca.EditMode & !string.IsNullOrWhiteSpace(marca.Nombre)){
            _marca = await MarcaService.GetById(marca.Id);
            if (_marca != null && marca.Nombre != _marca.Nombre){
                _marca.Nombre = marca.Nombre;
                await MarcaService.UpdateItem(_marca);
            }
        }
        
        marca.cambiarEditMode();
        StateHasChanged();
    }

    public async Task EliminarMarca(uint id){
        await MarcaService.DeleteItem(id);

        // Volver a cargar la lista de marcas
        await CargarMarcas();

        // Forzar la actualizacion del estado del componente
        StateHasChanged();
    }

    private async Task CloseModal(string modalId){
        await JSRuntime.InvokeVoidAsync("closeBSModal",modalId);
    }

    private void ShowModalConfirmar(ItemMarca marca){
        // Guardar la marca en otra varible que sea accesible para el modal
        marcaActual = marca;

        // Mostrar el modal
        JSRuntime.InvokeVoidAsync("showBSModal","ConfirmForm");
    }

    private void ShowModalEliminar(ItemMarca marca){
        // Guardar la marca actual
        marcaActual = marca;

        //Mostrar el modal
        JSRuntime.InvokeVoidAsync("showBSModal","ConfirmDelForm");
    }

    private async Task ValidarNombre (){
        msjError = null;

        if (string.IsNullOrEmpty(marcaNueva.Nombre)){
            return;
        }

        if (string.IsNullOrWhiteSpace(marcaNueva.Nombre)){
            msjError = "Ingrese un nombre.";
            await JSRuntime.InvokeVoidAsync("focusAndSelect","inputNombre");
            return;
        }

        if (marcas != null &&
            marcas.Any(m => m.Nombre.Equals(marcaNueva.Nombre, StringComparison.OrdinalIgnoreCase))){
                msjError = $"El nombre {marcaNueva.Nombre} ya existe.";
                await JSRuntime.InvokeVoidAsync("focusAndSelect","inputNombre");
                return;
            }
    }
}
