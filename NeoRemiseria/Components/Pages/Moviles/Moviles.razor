@page "/moviles"

@rendermode InteractiveServer

@using Models
@using Services

@inject NavigationManager NavigationManager
@inject ITable<Deuda> DeudaService
@inject ITable<Movil> MovilService

<PageTitle>Remiseria Mar Azul - Móviles</PageTitle>

<HeadContent>
    <link rel="stylesheet" href="global.css" />
</HeadContent>

<SectionContent SectionName="TopBar">
    <div class="top-row px-4">
        <a href="/" role="button" @onclick="@(() => {NavigationManager.NavigateTo("/", true);})">Inicio</a>
    </div>
</SectionContent>

<h3 class="mb-3 text-center text-primary">Lista de Móviles</h3>

<div class="text-end mb-3">
    <button class="btn btn-success" @onclick="CreateNewMovil">Agregar Nuevo Móvil</button>
</div>

@if (moviles == null)
{
    <div class="text-center">Cargando móviles...</div>
}
else if (!moviles.Any())
{
    <div class="alert alert-warning text-center">No hay móviles disponibles.</div>
}
else
{
    <div class="table-responsive">
        <table class="table table-bordered table-hover shadow-lg rounded" style="border-radius: 15px; overflow: hidden;">
            <thead style="background: linear-gradient(90deg, #007bff, #00aaff);" class="text-white">
                <tr>
                    <th>Patente</th>
                    <th>Año</th>
                    <th>Modelo</th>
                    <th>Titular</th>
                    <th>Acciones</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var movil in moviles)
                {
                    <tr>
                        <td>@movil.Patente</td>
                        <td>@movil.Año</td>
                        <td>@movil.IdModeloNavigation?.Nombre</td>
                        <td>@movil.IdTitularNavigation?.NombreCompleto</td>
                        <td class="btn-group-sm">
                            <button class="btn btn-warning" @onclick="() => EditMovil(movil.Id)">
                                Editar
                            </button>
                            <button class="btn btn-danger" @onclick="() => ConfirmDeleteMovil(movil.Id)">
                                Eliminar
                            </button>
                        </td>
                    </tr>
                }
            </tbody>

            @* Mensaje si no hay resultados *@
            @if (!moviles.Any())
            {
                <tr>
                    <td colspan="5" class="text-center">No se encontraron resultados.</td>
                </tr>
            }
        </table>
    </div>
}

@code {
    private List<Movil> moviles = null!;
    private List<Deuda>? deudasPorMovil;

    protected override async Task OnInitializedAsync()
    {
        await LoadMoviles();
    }

    private async Task LoadMoviles()
    {
        // Traer solos los moviles que se encuentren activos (que no fueron eliminados)
        moviles = await MovilService.GetAll(m => m.Estado == 'A');
        
        // Ordenar por el nombre del titular
        moviles = moviles.OrderBy(m => m.IdTitularNavigation?.NombreCompleto).ToList();
    }

    private void CreateNewMovil()
    {
        NavigationManager.NavigateTo("movil-form", true);
    }

    private void EditMovil(uint id)
    {
        NavigationManager.NavigateTo($"editar-movil/{id}", true);
    }

    private async Task ConfirmDeleteMovil(uint id)
    {
        // Muestra un cuadro de diálogo para decidir si se elimina o no
        var confirmed = await Swal.FireAsync(new SweetAlertOptions{
            Title = "Confirmación",
            TitleText = "¿Está seguro que desea eliminar este móvil?",
            ShowConfirmButton = true,
            ConfirmButtonText = "Si",
            ShowDenyButton = true,
            Icon = SweetAlertIcon.Warning
        });
        if (confirmed.IsConfirmed)
        {
            await DeleteMovil(id);
        }
    }

    private async Task DeleteMovil(uint id)
    {
        try{
            // Realizar las comprobaciones
            // Obtener las deudas del movil
            deudasPorMovil = await DeudaService.GetAll(d => d.IdMovil == id && d.Saldo != 0) ?? null;

            // Tiene deuda, impedir la eliminación
            if(deudasPorMovil != null && deudasPorMovil.Count > 0) throw new Exception("No se puede eliminar un móvil que registre deudas impagas.");

            // Eliminar el móvil
            bool eliminado = await MovilService.DeleteItem(id);
            // Si no se pudo eliminar, lanzar excepción
            if (!eliminado) throw new Exception("No se pudo realizar la eliminación");

            // Se pudo eliminar...
            await Swal.FireAsync("Información", $"Se eliminó el móvil {id}", SweetAlertIcon.Info);

            // Actualizar los móviles
            await LoadMoviles();
        }
        catch (Exception e){
            await Swal.FireAsync("Error", e.Message, SweetAlertIcon.Error);
        }
    }
}