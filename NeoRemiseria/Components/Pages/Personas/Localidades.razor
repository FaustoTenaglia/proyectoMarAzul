@page "/localidades"

@using Models
@using Services

@inject IJSRuntime JSRuntime
@inject NavigationManager Navigation
@inject ITable<Localidad> LocalidadService
@inject ITable<Provincia> ProvinciaService

@rendermode InteractiveServer

<div class="input-group mb-3">
    <h3 class="mx-2">Localidades</h3>
    <button type="button" class="btn btn-outline-success" @onclick="() => Handle(localidadSeleccionada)">
        <i class="bi bi-plus-lg"></i>
    </button>
</div>

<ModalDialog 
    Mensaje=@($"¿Desea eliminar la localidad {@localidadSeleccionada?.Nombre}?") 
    Id="modalEliminar" 
    Titulo = "Confirmación"
    OnResult=" async Task (int res) => {if(localidadSeleccionada != null && res == 1){await LocalidadService.DeleteItem(localidadSeleccionada.Id); await CargarDatos();}}" />

@if(localidades != null){
    <table class="table table-hover">
        <thead>
            <tr class="table-dark">
                <th>Nombre</th>
                <th colspan="2">Provincia</th>
            </tr>
        </thead>
        <tbody>
            @foreach(var localidad in localidades.OrderBy(l => l.Nombre)){
                <tr>
                    <td>@localidad.Nombre</td>
                    <td>@localidad.IdProvinciaNavigation?.Nombre</td>
                    <td class="btn-group-sm">
                        <button type="button" class="btn btn-outline-primary" @onclick="() => Handle(localidad)">
                            <i class="bi bi-pen-fill"></i>
                        </button>
                        <button type="button" class="btn btn-outline-danger" @onclick="() => ConfirmarEliminacion(localidad.Id)">
                            <i class="bi bi-trash"></i>
                        </button>
                    </td>
                </tr>
            }
        </tbody>
    </table>
}
else{
    <p>Cargando datos...</p>
}

@code{
    private List<Localidad> localidades = new List<Localidad>();
    private List<Provincia> provincias = new List<Provincia>();
    private Localidad? localidadSeleccionada;
    private SweetAlertMixin SwalBootstrap {get; set;} = null!;

    protected override async Task OnInitializedAsync(){
        localidades = await LocalidadService.GetAll();
        provincias = await ProvinciaService.GetAll();

        // Inicializar el modal SweetAlert2 con estilo Bootstrap
        SwalBootstrap = Swal.Mixin (new SweetAlertOptions {
            CustomClass = new SweetAlertCustomClass{
                ConfirmButton = "btn btn-primary",
                DenyButton = "btn btn-danger",
                CancelButton = "btn btn-secondary",
            },
            ButtonsStyling = false,
            AllowOutsideClick = false
        });
    }

    private async Task CargarDatos(){
        localidades = await LocalidadService.GetAll();
        localidadSeleccionada = new Localidad();
    }

    private async Task ConfirmarEliminacion(uint id){
        localidadSeleccionada = await LocalidadService.GetById(id);
        if (localidadSeleccionada != null){
            // await JSRuntime.InvokeVoidAsync("showBSModal","modalEliminar");

            // Mostrar modal de SweetAlert para confirmar la eliminación
            SweetAlertResult res = await SwalBootstrap.FireAsync(new SweetAlertOptions {
                Title = "Confirmación",
                Html = $"¿Desea elminar la localidad <b>{localidadSeleccionada.Nombre}</b>?",
                Icon = SweetAlertIcon.Question,
                ConfirmButtonText = "Sí",
                DenyButtonText = "No",
                ShowDenyButton = true,
                FocusDeny = true
            });

            // Eliminar el registro
            if (res.IsConfirmed){
                try{
                    await LocalidadService.DeleteItem(localidadSeleccionada.Id);
                    await SwalBootstrap.FireAsync("Información", $"Se eliminó con éxito la localidad {localidadSeleccionada.Nombre}.", SweetAlertIcon.Success);
                    await CargarDatos();
                    StateHasChanged();
                }
                catch (Exception e){
                    await SwalBootstrap.FireAsync("Error", e.Message, SweetAlertIcon.Error);
                }
            }
        }else{
            await SwalBootstrap.FireAsync("Información","No se pudo eliminar la localidad seleccionada.", SweetAlertIcon.Info);
        }
    }

    private void Handle(Localidad? localidad){
        var ruta =  localidad != null ? $"/localidad-form/{localidad.Id}" : $"/localidad-form";
        Navigation.NavigateTo(ruta, true);
    }
}